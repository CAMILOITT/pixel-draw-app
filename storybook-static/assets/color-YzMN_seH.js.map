{"version":3,"file":"color-YzMN_seH.js","sources":["../../src/utils/color.ts"],"sourcesContent":["import { InformationColor } from 'src/types/color/enums'\n\nexport class Color {\n  static getDataHsla(colorHsla: string) {\n    const regex =\n      /hsla?\\s*?\\(\\s*?(?<h>\\d+),\\s*?(?<s>\\d+)%?,\\s*?(?<l>\\d+)%,?\\s*(?<a>\\d+(?:\\.\\d+)?)?\\s*?\\)/\n    const infoMatch = colorHsla.match(regex)\n    if (!infoMatch || !infoMatch.groups) return null\n    return Object.values(infoMatch.groups).map(element =>\n      isNaN(parseInt(element)) ? 1 : Number(element)\n    ) as [number, number, number, number]\n  }\n\n  static getDataRgb(colorRgb: string) {\n    const regex =\n      /rgba?\\s*?\\(\\s*?(?<r>\\d+),\\s*?(?<g>\\d+),\\s*?(?<b>\\d+),?\\s*?(?<a>\\d+(?:\\.\\d+)?)?\\s*?\\)/\n\n    const infoMatch = colorRgb.match(regex)\n    if (!infoMatch || !infoMatch.groups) return null\n    return Object.values(infoMatch.groups).map(element =>\n      isNaN(parseInt(element)) ? 1 : Number(element)\n    ) as [number, number, number, number]\n  }\n\n  static convertRgbToHsl(color: string) {\n    if (color.includes('rgb')) {\n      const value = this.getDataRgb(color)\n      if (value) return ConvertColor.rgbToHsl(...value)\n    }\n    if (color.includes('hsl')) return this.getDataHsla(color)\n    return null\n  }\n\n  static compareColor(color1: string, color2: string) {\n    const valueColor1 = this.convertRgbToHsl(color1)\n    const valueColor2 = this.convertRgbToHsl(color2)\n\n    return JSON.stringify(valueColor1) === JSON.stringify(valueColor2)\n  }\n\n  static convertDataToString({\n    hue,\n    saturation,\n    lightness,\n    alpha,\n  }: InformationColor) {\n    return `hsla(${hue}, ${saturation}%, ${lightness}%, ${alpha})`\n  }\n}\n\nexport class ConvertColor {\n  static rgbToHsl(\n    red: number,\n    green: number,\n    blue: number,\n    alpha: number = 1\n  ): [number, number, number, number] {\n    if (!alpha) alpha = 1\n\n    red /= 255\n    green /= 255\n    blue /= 255\n    const l = Math.max(red, green, blue)\n    const s = l - Math.min(red, green, blue)\n    const h = s\n      ? l === red\n        ? (green - blue) / s\n        : l === green\n        ? 2 + (blue - red) / s\n        : 4 + (red - green) / s\n      : 0\n\n    const r = Math.round(60 * h < 0 ? 60 * h + 360 : 60 * h)\n    const g = Math.round(\n      100 * (s ? (l <= 0.5 ? s / (2 * l - s) : s / (2 - (2 * l - s))) : 0)\n    )\n    const b = Math.round((100 * (2 * l - s)) / 2)\n\n    return [r, g, b, alpha]\n  }\n\n  static hslToRgb(\n    hue: number,\n    saturation: number,\n    light: number,\n    alpha: number = 1\n  ) {\n    if (!alpha) alpha = 1\n    saturation /= 100\n    light /= 100\n\n    const c = (1 - Math.abs(2 * light - 1)) * saturation\n    const x = c * (1 - Math.abs(((hue / 60) % 2) - 1))\n    const m = light - c / 2\n    let r = 0\n    let g = 0\n    let b = 0\n\n    if (0 <= hue && hue < 60) {\n      r = c\n      g = x\n      b = 0\n    } else if (60 <= hue && hue < 120) {\n      r = x\n      g = c\n      b = 0\n    } else if (120 <= hue && hue < 180) {\n      r = 0\n      g = c\n      b = x\n    } else if (180 <= hue && hue < 240) {\n      r = 0\n      g = x\n      b = c\n    } else if (240 <= hue && hue < 300) {\n      r = x\n      g = 0\n      b = c\n    } else if (300 <= hue && hue < 360) {\n      r = c\n      g = 0\n      b = x\n    }\n\n    r = Math.round((r + m) * 255)\n    g = Math.round((g + m) * 255)\n    b = Math.round((b + m) * 255)\n\n    return [r, g, b, alpha]\n  }\n}\n"],"names":["Color","getDataHsla","colorHsla","cov_2ljmrfwefq","f","regex","s","infoMatch","match","b","groups","Object","values","map","element","isNaN","parseInt","Number","getDataRgb","colorRgb","convertRgbToHsl","color","includes","value","ConvertColor","rgbToHsl","compareColor","color1","color2","valueColor1","valueColor2","JSON","stringify","convertDataToString","hue","saturation","lightness","alpha","red","green","blue","l","Math","max","min","h","r","round","g","hslToRgb","light","c","abs","x","m"],"mappings":"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"}