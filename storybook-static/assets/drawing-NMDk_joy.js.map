{"version":3,"file":"drawing-NMDk_joy.js","sources":["../../src/api/canvas/coord.ts","../../src/api/canvas/tools.ts","../../src/const/infoCanvas.ts","../../src/api/canvas/update.ts","../../src/api/canvas/drawing.ts"],"sourcesContent":["import { InformationDrawing } from '../../types/brush/interface'\n\nexport class Coords {\n  private _coords: InformationDrawing[][] = []\n  private nextCoords: InformationDrawing[][] = []\n  private group: InformationDrawing[] = []\n\n  get coords() {\n    return this._coords\n  }\n\n  update() {\n    this._coords.push(this.group)\n    this.nextCoords = [...this._coords]\n    this.group = []\n  }\n\n  toGroup({ x, y, w, h, tool, color: bg }: InformationDrawing) {\n    this.group.push({ x, y, w, h, tool, color: bg })\n  }\n\n  redo() {\n    if (this._coords.length === this.nextCoords.length) return\n    const index = this._coords.length\n    this._coords.push(this.nextCoords[index])\n  }\n\n  undo() {\n    if (this._coords.length < 1) return\n    this._coords.pop()\n  }\n}\n\nexport const coords = new Coords()\n","import { CanvasContext, CoordDrawing } from '../../types/drawing/interface'\nimport { Tools } from '../../types/tools/enums'\nimport { FillBucket } from '../../types/tools/type'\nimport { Color, ConvertColor } from '../../utils/color'\nimport { coords } from './coord'\n\n/**\n * Gets the color of the canvas at the cursor position\n * @param {CanvasContext & CoordDrawing} value\n * @prop {CanvasContext} ctx - The canvas rendering context\n * @prop {CoordDrawing} x - The x-coordinate of the shape\n * @prop {CoordDrawing} y - The y-coordinate of the shape\n * @returns Object containing color\n */\nexport function eyeDropper({ ctx, x, y }: CanvasContext & CoordDrawing) {\n  const color = ctx.getImageData(x, y, 1, 1).data\n  return color\n}\n\n/**\n * Fill the adjacent area with a specific color.\n *\n * @param {object} options - The options object.\n * @prop {CanvasRenderingContext2D} ctx - The canvas rendering context.\n * @prop {number} x - The starting x-coordinate.\n * @prop {number} y - The starting y-coordinate.\n * @prop {number} w - pixel paint width.\n * @prop {number} h - pixel paint height.\n * @prop {string} bg - The color to be replaced.\n * @prop {string} fillColor - The color to fill with.\n */\nexport function bucketFill({\n  ctx,\n  x,\n  y,\n  w,\n  h,\n  color: bg,\n  fillColor,\n}: FillBucket) {\n  const infoColor = Color.getDataHsla(fillColor)\n  const infoBg = ConvertColor.rgbToHsl(\n    ...(Color.getDataRgb(bg) || [0, 0, 0, 1])\n  )\n\n  if (\n    Color.compareColor(bg, fillColor) ||\n    !infoColor ||\n    (infoColor[3] < 0.5 && infoColor[0] === infoBg[0]) ||\n    infoColor[3] < 0.3\n  )\n    return\n  const { canvas } = ctx\n  const pixelStack = [[x, y]]\n\n  coords.toGroup({ tool: Tools.fillBucket, color: fillColor, x, y, w, h })\n\n  if (!pixelStack) return\n  while (pixelStack.length > 0) {\n    if (pixelStack.length < 1) break\n    const coord = pixelStack.pop()\n    if (!coord) break\n    const [x, y] = coord\n    if (x < 0 || x >= canvas.width || y < 0 || y >= canvas.height) continue\n    const pixelData = ctx.getImageData(x, y, 1, 1).data\n    const pixelColor = `rgb(${pixelData[0]}, ${pixelData[1]}, ${pixelData[2]})`\n    if (pixelColor === bg) {\n      ctx.fillStyle = fillColor\n      ctx.fillRect(x, y, w, h)\n      pixelStack.push([x + w, y])\n      pixelStack.push([x - w, y])\n      pixelStack.push([x, y + h])\n      pixelStack.push([x, y - h])\n    }\n  }\n}\n","import { CoordDrawing, DrawingDimensiones } from '../types/drawing/interface'\nimport { DrawingCanvas } from '../types/drawing/types'\n\nexport const maxSizeCanvas: DrawingDimensiones = {\n  w: 1000,\n  h: 1000,\n}\n\nexport const minSizeCanvas: DrawingDimensiones = {\n  w: 25,\n  h: 25,\n}\n\nexport const dataSize: DrawingDimensiones = {\n  w: 500,\n  h: 500,\n}\n\nexport const dataCanvasInt: DrawingCanvas & CoordDrawing = {\n  x: (window.innerWidth - dataSize.w) / 2,\n  y: (window.innerHeight - dataSize.h) / 2,\n  ...dataSize,\n  color: 'white',\n}\n\nexport const cleanBgCanvas: (CoordDrawing & DrawingDimensiones)[] = [\n  {\n    x: -window.innerWidth,\n    y: -window.innerHeight,\n    w: window.innerWidth + dataCanvasInt.x,\n    h: window.innerHeight * 3,\n  },\n  {\n    x: 0,\n    y: -window.innerHeight,\n    w: window.innerWidth,\n    h: window.innerHeight + dataCanvasInt.y,\n  },\n  {\n    x: dataCanvasInt.x + dataCanvasInt.w,\n    y: -window.innerHeight,\n    w: window.innerWidth * 2,\n    h: window.innerHeight * 3,\n  },\n  {\n    x: 0,\n    y: dataCanvasInt.y + dataCanvasInt.h,\n    w: window.innerWidth,\n    h: window.innerHeight,\n  },\n]\n\nexport const limitScaleCanvas = 20\n\nexport const speedMove = 2\n\nexport const positionMove: CoordDrawing = { x: 0, y: 0 }\n","import { cleanBgCanvas } from '../../const/infoCanvas'\nimport { CleanCanvas } from '../../types/canvas/type'\nimport { CanvasContext } from '../../types/drawing/interface'\n\n\n/**\n * erase the entire canvas\n * @param {CleanCanvas} value\n * @prop {CanvasRenderingContext2D} ctx - context of canvas\n * @prop {number} w - width of canvas\n * @prop {number} h - height of canvas\n * @prop {string | null} bg - background color of canvas\n */\n\nexport function cleanCanvas({ ctx, w, h, bg }: CleanCanvas) {\n  if (!bg) {\n    ctx.beginPath()\n    ctx.clearRect(0, 0, w, h)\n    ctx.closePath()\n  } else {\n    ctx.beginPath()\n    ctx.fillStyle = bg\n    ctx.clearRect(0, 0, w, h)\n    ctx.fill()\n    ctx.closePath()\n  }\n}\n\n/**\n * paints the canvas with the information stored in the variable\n * @param {CanvasContext} CanvasContext\n * @prop {CanvasRenderingContext2D} ctx - context of canvas\n */\n\nexport function handleCleanBg({ ctx }: CanvasContext) {\n  for (const clean of cleanBgCanvas) {\n    ctx.clearRect(clean.x, clean.y, clean.w, clean.h)\n  }\n}\n","import { CanvasContext } from '../../types/drawing/interface'\nimport {\n  Eraser,\n  FillBackgroundCanvas,\n  InfoDrawing,\n} from '../../types/drawing/types'\nimport { Tools } from '../../types/tools/enums'\nimport { coords } from './coord'\nimport { bucketFill, eyeDropper } from './tools'\nimport { cleanCanvas } from './update'\n\n/**\n * Fills the background of a canvas with the specified color.\n *\n * @param {FillBackgroundCanvas} infoCanvas - A object with info about the canvas.\n * @prop {CanvasContext} ctx - Context of the canvas to be modified.\n * @prop {number} h - The height of the canvas.\n * @prop {number} w - The width of the canvas.\n * @prop {string | null} bg - The background color of the canvas.\n */\n\nexport function fillBackgroundCanvas({ ctx, bg, w, h }: FillBackgroundCanvas) {\n  if (!bg) return\n  ctx.beginPath()\n  ctx.fillStyle = bg\n  ctx.rect(0, 0, w, h)\n  ctx.fill()\n  ctx.closePath()\n}\n\n/**\n * Fills the background of a canvas with the specified color.\n * @param {InfoDrawing} infoDraw - The canvas context and configuration.\n */\n\nexport function draw({ ctx, color, x, y, w, h }: InfoDrawing) {\n  ctx.beginPath()\n  ctx.fillStyle = color\n  ctx.rect(x, y, w, h)\n  ctx.fill()\n  ctx.closePath()\n  coords.toGroup({ tool: Tools.brush, color, x, y, w, h })\n}\n\n/**\n * clear the pixelated area\n * @param valueClean\n * @prop {CanvasRenderingContext2D} value.ctx - Canvas context\n * @prop {number} x - x coordinate\n * @prop {number} y - y coordinate\n * @prop {number} w - width\n * @prop {number} h - height\n * @prop {string | null} bg - pixel color\n */\n\nexport function clean({ ctx, x, y, w, h, bg }: Eraser) {\n  if (bg) {\n    const infoDrawing = { ctx, x, y, w, h, color: bg }\n    draw(infoDrawing)\n    return\n  }\n  ctx.beginPath()\n  ctx.clearRect(x, y, w, h)\n  ctx.closePath()\n  coords.toGroup({ tool: Tools.eraser, x, y, w, h, color: bg })\n}\n\n/**\n * repaint the canvas with the saved information\n *\n * @param {CanvasContext} CanvasContext\n * @prop {CanvasRenderingContext2D} ctx\n */\n\nexport function reDrawing({ ctx }: CanvasContext) {\n  const sizeCanvas = { w: ctx.canvas.width, h: ctx.canvas.height }\n  ctx.clearRect(0, -100, sizeCanvas.w + 500, sizeCanvas.h + 500)\n\n  cleanCanvas({ ctx, w: ctx.canvas.width, h: ctx.canvas.height, bg: null })\n\n  for (const blockDraw of coords.coords) {\n    for (const dataDraw of blockDraw) {\n      if (dataDraw.tool === Tools.eraser)\n        clean({ ...dataDraw, bg: dataDraw.color, ctx })\n      if (dataDraw.tool === Tools.brush && dataDraw.color)\n        draw({ ...dataDraw, color: dataDraw.color, ctx })\n      if (dataDraw.tool === Tools.fillBucket) {\n        const color = eyeDropper({\n          ctx,\n          ...dataDraw,\n        })\n        const bg = `rgb(${color[0]}, ${color[1]}, ${color[2]})`\n        const fillColor = dataDraw.color || 'black'\n        bucketFill({ ctx, ...dataDraw, color: bg, fillColor })\n      }\n    }\n  }\n}\n"],"names":["cov_r14jyuwyf","path","hash","global","gcv","coverageData","coverage","actualCoverage","_coords","s","nextCoords","group","coords","f","update","push","toGroup","x","y","w","h","tool","color","bg","redo","length","b","index","undo","cov_2hlybnjij6","eyeDropper","ctx","getImageData","data","bucketFill","fillColor","infoColor","getDataHsla","infoBg","ConvertColor","rgbToHsl","Color","getDataRgb","compareColor","cov_2izb3tu59n","dataSize","dataCanvasInt","window","innerWidth","innerHeight","cleanCanvas","cov_fr242zkoa","beginPath","clearRect","closePath","cov_152n0l971a","fillBackgroundCanvas","fillStyle","rect","fill","draw","Tools"],"mappings":"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A,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAA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A,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,uBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,CAAA,EAAA,EAAA,CAAA,KAAA,OAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,QAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,YAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,UAAA,CAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,KAAA,KAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,OAAA,OAAA,MAAA,EAAA,IAAA,CAAA,KAAA,OAAA,OAAA,MAAA,CAAA,CAAA,EAAA,KAAA,CAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,KAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,OAAA,OAAA,MAAA,EAAA,IAAA,CAAA,KAAA,OAAA,OAAA,MAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,KAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,OAAA,OAAA,MAAA,EAAA,IAAA,CAAA,KAAA,OAAA,OAAA,MAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,KAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,OAAA,OAAA,MAAA,EAAA,IAAA,CAAA,KAAA,OAAA,OAAA,MAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,ccAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAA,eAAA,CAAA,QAAA,EAAA,KAAA,KAAA,QAAA,CAAA,+EAAA,EAAA,MAAA,GAAA,SAAA,q9CAAA,EAAA,gBAAA,2CAAA,KAAA,0CAAA,EAAAC,EAAAH,EAAAC,CAAA,IAAAD,EAAAC,CAAA,EAAA,CAAA,IAAA,CAAAE,EAAAL,CAAA,GAAAK,EAAAL,CAAA,EAAA,OAAAC,KAAAI,EAAAL,CAAA,EAAAI,GAAA,IAAAE,EAAAD,EAAAL,CAAA,EAAAsD,OAAAA,YAAA,CAAA,OAAAhD,CAAA,EAAAA,CAAAgD,CAAAA,EAAA,EA1BY,SAAAC,EAAsB,CAAAzB,IAAAA,EAAMR,GAAAA,EAAWJ,EAAAA,EAAAC,EAAAA,CAAA,EAAA,CACrD,GADqDmC,EAAA,EAAA1C,EAAA0C,CAAAA,IAAAA,EAAA,EAAA9C,OAC7Cc,EAAAgC,EAAA,EAAA7B,EAAA6B,CAAAA,EAAAA,CAAAA,QAAA,CAAAA,EAAA,EAAA7B,EAAA6B,CAAAA,EAAAA,CAAAA,IAAAA,EAAA,EAAA9C,EAAA,CAAA,IAAA,MAAA,CAAA8C,EAAA,EAAA9C,OACAsB,EAAAqB,YAAAG,EAAA,EAAA9C,EACNsB,CAAAA,IAAAA,EAAA0B,UAAgBlC,EAAAgC,EAAA9C,EAAAA,EAChBsB,CAAAA,IAAAA,EAAA2B,KAAA,EAAA,EAAAvC,EAAAC,CAAA,EAAAmC,EAAA,EAAA9C,EACFsB,CAAAA,IAAAA,EAAA4B,KAAA,EAAAJ,EAAA9C,EAAAA,OACAsB,EAAIuB,UAAA,CACJ,CAgBA,SAAcM,EAAK,CAAG7B,IAAAA,EAAIT,MAAAA,EAAOL,EAAAA,EAAAC,EAAAA,EAAAC,EAAAA,EAAUC,EAAAA,CAAA,EAAW,CAAAmC,EAAA,EAAA1C,EAAA0C,CAAAA,IAAAA,IAAA9C,EAAA,CAAA,IAE3CsB,EAAAqB,UAAA,EAAAG,EAAA9C,EAAAA,EACTsB,CAAAA,IAAAA,EAAA0B,uBACM1B,EAAA2B,KAAAzC,EAAAC,EAAAC,WACFY,EAAAA,IAAAA,EAAA4B,OAAAJ,EAAA,EAAA9C,EACFsB,EAAAA,IAAAA,EAAAuB,UAAaC,EAAAA,EAAA,EAAA9C,QACXG,EAAAI,QAAU,CAAAK,KAAAwC,QAA0BvC,MAAAA,EAAAL,EAAAA,EAAAC,EAAAA,EAAOC,EAAAA,KAAK,CAAA,CAClD"}